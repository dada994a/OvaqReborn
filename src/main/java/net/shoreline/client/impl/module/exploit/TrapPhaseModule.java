package net.shoreline.client.impl.module.exploit;

import net.minecraft.block.Block;
import net.minecraft.client.network.ClientPlayerEntity;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.network.packet.c2s.play.UpdateSelectedSlotC2SPacket;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.Vec3d;
import net.shoreline.client.api.config.Config;
import net.shoreline.client.api.config.setting.NumberConfig;
import net.shoreline.client.api.event.listener.EventListener;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.impl.event.TickEvent;
import net.shoreline.client.util.world.BlockUtil;

public class TrapPhaseModule extends ToggleModule {

    private final Config<Float> offsetConfig = new NumberConfig<>("Offset", "Vertical offset when phasing.", 0.2f, 0.1f, 0.6f);

    public TrapPhaseModule() {
        super("TrapPhase", "Phases through blocks using packet manipulation.", ModuleCategory.EXPLOIT);
    }

    @EventListener
    public void onTick(TickEvent event) {
        int slot = findTrapdoorSlot();
        if (slot == -1) {
            return;
        }

        BlockPos playerPos = mc.player.getBlockPos();
        BlockPos trapPos = findTrapPosition(playerPos);
        if (trapPos == null) {
            return;
        }

        phasePlayer(trapPos, slot);
    }

    private int findTrapdoorSlot() {
        for (int i = 0; i < mc.player.getInventory().size(); i++) {
            Block block = Block.getBlockFromItem(mc.player.getInventory().getStack(i).getItem());
            if (block != null && block.getTranslationKey().contains("trapdoor")) {
                return i;
            }
        }
        return -1;
    }

    private BlockPos findTrapPosition(BlockPos playerPos) {
        BlockPos[] offsets = new BlockPos[]{
                new BlockPos(1, 0, 0),
                new BlockPos(-1, 0, 0),
                new BlockPos(0, 0, 1),
                new BlockPos(0, 0, -1)
        };

        for (BlockPos offset : offsets) {
            BlockPos pos = playerPos.add(offset);
            if (BlockUtil.isBlockAccessible(pos)) {
                return pos;
            }
        }
        return null;
    }

    private void phasePlayer(BlockPos trapPos, int slot) {
        ClientPlayerEntity player = mc.player;

        double x = player.getX();
        double y = player.getY();
        double z = player.getZ();

        player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(x, y + offsetConfig.getValue(), z, player.isOnGround()));

        Direction facing = null;
        for (Direction direction : Direction.values()) {
            if (trapPos.offset(direction).equals(player.getBlockPos())) {
                facing = direction;
            }
        }

        player.networkHandler.sendPacket(new UpdateSelectedSlotC2SPacket(slot));
        BlockHitResult blockHitResult = new BlockHitResult(new Vec3d(0.5, 0.8, 0.5), facing, trapPos, false);
        mc.interactionManager.interactBlock(player, Hand.MAIN_HAND, blockHitResult);
        player.networkHandler.sendPacket(new UpdateSelectedSlotC2SPacket(player.getInventory().selectedSlot));
        player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(x, y, z, player.isOnGround()));
        disable();
    }
}
