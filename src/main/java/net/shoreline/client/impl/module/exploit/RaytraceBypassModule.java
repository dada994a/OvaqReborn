package net.shoreline.client.impl.module.exploit;

import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.shoreline.client.api.config.Config;
import net.shoreline.client.api.config.setting.BooleanConfig;
import net.shoreline.client.api.config.setting.EnumConfig;
import net.shoreline.client.api.config.setting.NumberConfig;
import net.shoreline.client.api.event.listener.EventListener;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.mixin.accessor.AccessorPlayerMoveC2SPacket;
import net.shoreline.client.util.math.timer.CacheTimer;
import net.shoreline.client.util.math.timer.Timer;

/**
 * @author OvaqReborn
 * @since 1.0
 */

public class RaytraceBypassModule extends ToggleModule {

    Config<Boolean> alwaysConfig = new BooleanConfig("Always", "Always active", true);
    Config<Mode> modeConfig = new EnumConfig<>("RaytraceMod", "Raytrace mode", Mode.Motion, Mode.values());
    Config<Double> keepConfig = new NumberConfig<>("Keep", "Keep distance", 2.0, 0.0, 10.0);
    Config<Integer> delayConfig = new NumberConfig<>("Delay", "Delay in ms", 250, 0, 1000);
    Config<Double> offsetConfig = new NumberConfig<>("Offset", "Offset distance", 15.0, 0.0, 40.0);

    private final Timer timer = new CacheTimer();
    private float pitch = -91;

    public RaytraceBypassModule() {
        super("RaytraceBypass", "Bypass raytrace checks", ModuleCategory.EXPLOIT);
    }

    @EventListener
    public void onPacketSend(Packet<?> packet) {
        switch (modeConfig.getValue()) {
            case Packet -> {
                if (packet instanceof PlayerInteractBlockC2SPacket && timer.passed(delayConfig.getValue())) {
                    if (mc.player != null && mc.world != null && mc.world.isSpaceEmpty(mc.player.getBoundingBox().expand(keepConfig.getValue(), offsetConfig.getValue(), keepConfig.getValue()))) {
                        pitch = -75;
                        timer.reset();
                    }
                }
            }
            case Motion -> {
                if (packet instanceof PlayerMoveC2SPacket movePacket && pitch != -91) {
                    if (alwaysConfig.getValue()) {
                        ((AccessorPlayerMoveC2SPacket) movePacket).hookSetPitch(pitch);
                    }
                    pitch = -91;
                }
            }
            case Client -> {
                if (packet instanceof PlayerInteractBlockC2SPacket && timer.passed(delayConfig.getValue())) {  // テスト
                    if (mc.player != null && mc.world != null && mc.world.isSpaceEmpty(mc.player.getBoundingBox().expand(keepConfig.getValue(), offsetConfig.getValue(), keepConfig.getValue()))) {
                        pitch = -75;
                        timer.reset();
                    }
                }
            }
        }
    }

    public enum Mode {
        Packet,
        Client,
        Motion
    }
}
